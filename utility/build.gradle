apply plugin: 'com.android.library'
apply plugin: "de.mannodermaus.android-junit5"

android {
    compileSdkVersion 26
    buildToolsVersion '27.0.3'

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //testCompile 'junit:junit:4.12'
    testCompile 'com.android.support.test:runner:1.0.2-alpha1'

    // (Required) Writing and executing Unit Tests on the JUnit Platform.
    testImplementation junit5.unitTests()

    // (Optional) If you need "Parameterized Tests".
    testImplementation junit5.parameterized()

    // (Optional) Writing and executing Instrumented Tests with the JUnit Platform Runner.
    //
    // IMPORTANT:
    // By declaring this dependency, you have to use a minSdkVersion
    // of at least 26, since the nature of JUnit 5 relies on APIs that aren't
    // available on Android devices before then.
    // Consider creating a product flavor for this - see the sample project for details.
    androidTestImplementation junit5.instrumentationTests()
}

dependencies{
    // (Optional) For running tests inside Android Studio 3
    // Please refer to the "Android Studio Workarounds" section for more insight on this.
    testCompileOnly junit5.unitTestsRuntime()
    androidTestImplementation 'org.junit.jupiter:junit-jupiter-api'
}

android.testOptions {
    // Configuration closure added by the plugin;
    // all configurable parameters related to JUnit 5 can be found here
    junitPlatform {
        // The JUnit Jupiter dependency version to use
        jupiterVersion "5.0.3"

        // The JUnit Vintage Engine dependency version to use
        vintageVersion "4.12.2"

        // Options related to running unit tests with JUnit 5.
        unitTests.all { test ->
            // Configure custom jvmArgs, system properties and environment variables
            jvmArgs "--my-argument"
            systemProperty "my.system.property", "true"
            environment "MY_ENVIRONMENT", "development"
        }

        // Options related to running instrumented tests with JUnit 5.
        // This is an incubating feature which utilizes the backwards-compatibility
        // of the JUnit Platform in order to enhance the default Test Instrumentation Runner
        // with new power. As of version 1.0.31, instrumentation test support is provided by default,
        // but it's up to you to include the JUnit 5 dependencies and write some tests with it.
        instrumentationTests {
            // Enable instrumentation tests (default: true)
            enabled true

            // The Android-Instrumentation-Test dependency version to use (default: latest)
            version "0.2.1"
        }

        // Configuration of companion tasks for JaCoCo Reports,
        // associated with each JUnit 5 task generated by the plugin.
        // Just like the companion tasks themselves, these properties
        // will only have an effect if your module declares the "jacoco" plugin as well.
        // For each of the available report types, you can toggle the availability
        // and destination folders that they write to.
        jacocoOptions {
            // Additional exclusion rules for Code Coverage Reports -
            // by default, R.class & BuildConfig.class are excluded.
            excludedClasses += []
            excludedSources += []

            // By default, Jacoco tasks will be generated by the plugin
            // if the project also applies the Jacoco plugin.
            // To disable completely, use this flag
            taskGenerationEnabled = true

            // If instead, you want to generate Jacoco tasks only for certain variants,
            // this can be specified here. By default, tasks are generated for all variants
            onlyGenerateTasksForVariants "debug", "release"

            // Configuration for generated Code Coverage reports
//            xml {
//                enabled true
//                destination project.file()
//            }
//            html {
//                enabled true
//                destination project.file()
//            }
//            csv {
//                enabled true
//                destination project.file()
//            }
        }
    }
}

def repo = new File(rootDir, "repository")

apply plugin: 'maven'


uploadArchives {
    repositories {
        mavenDeployer {
            repository url: "file://${repo.absolutePath}"
            pom.version = '1.2.0'
            pom.groupId = 'jp.co.thcomp'
            pom.artifactId = 'android_utility'
        }
    }
}